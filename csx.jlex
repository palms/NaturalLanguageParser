/*  This is a JLex specification for a small subset of CSX tokens.
    Expand it to handle all CSX tokens as part of your solution for project 2 */


import java_cup.runtime.*;



class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col){
		linenum=line;colnum=col;};
}

class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col){
		super(line,col);intValue=val;};
}

class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col){
		super(line,col);identifierText=text;};
}

class CSXCharLitToken extends CSXToken {
	char charValue;
	CSXCharLitToken(char val,int line,int col){
		super(line,col);charValue=val;};
}

class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col){
		super(line,col);
		stringText=text;
	};
}

// This class is used to track line and column numbers
// Please feel free to change or extend it

class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

%%
Digit=[0-9]
AnyLetOrDig=[A-Za-z0-9]
AnyLet=[A-Za-z]
CharLits=[^(('|\)|\'|\n|\t|\\))]
StringLits=[^((\"|\)|\"|\n|\t|\\))]
Whitespace=[\40\t]



// Tell JLex to have yylex() return a Symbol, as JavaCUP will require
%type Symbol

// Tell JLex what to return when eof of file is hit
%eofval{
return new Symbol(sym.EOF, new  CSXToken(0,0));
%eofval}


%%

[bB][oO][oO][lL] {Pos.setpos(); Pos.col += 4;
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
[bB][rR][eE][aA][kK] {Pos.setpos(); Pos.col += 5;
		return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos.linenum,Pos.colnum));}
[cC][hH][aA][rR] {Pos.setpos(); Pos.col += 4;
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
[cC][lL][aA][sS][sS] {Pos.setpos(); Pos.col += 5;
		return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos.linenum,Pos.colnum));}
[cC][oO][nN][sS][tT] {Pos.setpos(); Pos.col += 5;
		return new Symbol(sym.rw_CONST,
			new CSXToken(Pos.linenum,Pos.colnum));}
[cC][oO][nN][tT][iI][nN][uU][eE] {Pos.setpos(); Pos.col += 8;
		return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
[eE][lL][sS][eE] {Pos.setpos(); Pos.col += 4;
		return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
[fF][aA][lL][sS][eE] {Pos.setpos(); Pos.col += 5;
		return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
[iI][fF] {Pos.setpos(); Pos.col += 2;
		return new Symbol(sym.rw_IF,
			new CSXToken(Pos.linenum,Pos.colnum));}
[iI][nN][tT] {Pos.setpos(); Pos.col += 3;
		return new Symbol(sym.rw_INT,
			new CSXToken(Pos.linenum,Pos.colnum));}
[rR][eE][aA][dD] {Pos.setpos(); Pos.col += 4;
		return new Symbol(sym.rw_READ,
			new CSXToken(Pos.linenum,Pos.colnum));}
[rR][eE][tT][uU][rR][nN] {Pos.setpos(); Pos.col += 6;
		return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos.linenum,Pos.colnum));}
[tT][rR][uU][eE] {Pos.setpos(); Pos.col += 4;
		return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
[vV][oO][iI][dD] {Pos.setpos(); Pos.col += 4;
		return new Symbol(sym.rw_VOID,
			new CSXToken(Pos.linenum,Pos.colnum));}
[wW][hH][iI][lL][eE] {Pos.setpos(); Pos.col += 5;
		return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos.linenum,Pos.colnum));}
[wW][rR][iI][tT][eE] {Pos.setpos(); Pos.col += 5;
		return new Symbol(sym.rw_WRITE,
			new CSXToken(Pos.linenum,Pos.colnum));}
			
			
			
			
{AnyLet}{AnyLetOrDig}*
		  {//collects identifier, advances line and column to end of token
		  Pos.setpos(); Pos.col += yytext().length();
		  //System.out.println(new String(yytext()) + "!!!");
		  return new Symbol(sym.IDENTIFIER,
				new CSXIdentifierToken(
					new String(yytext()),Pos.linenum,Pos.colnum));}
					
[\"]{StringLits}*[\"]
		  {//collects string literal, advances token
		  Pos.setpos(); Pos.col += yytext().length();
		  return new Symbol(sym.STRLIT,
				new CSXStringLitToken(
					new String(yytext()),Pos.linenum,Pos.colnum));}
					
[']{CharLits}[']
		  {//collects character literal, advances token
		  Pos.setpos(); Pos.col += yytext().length();
		  char tmp = yytext().charAt(1);
		  return new Symbol(sym.CHARLIT,
				new CSXCharLitToken(
					tmp,Pos.linenum,Pos.colnum));}					

					
"//"[^$^\n]*[$\n] {// skips single line comment
			Pos.line += 1;  Pos.col = 1;}

"##" {//if mulit-line comment syntax detected
		boolean toBreak = false;
		char current;
		//while comment hasn't been ended, pass tokens in between
		while (!toBreak) {
			current = yy_advance();
			
			if (current == '\n') {
				Pos.line += 1; Pos.col = 1;
			}
			
			else if (current != '#') {
				Pos.col += 1;
			}
			else {
				current = yy_advance();
				if (current == '#') {
					toBreak = true;
				}
				else {
					int lineN = Pos.line;
					int colN = Pos.col;
					if (current == '\n') {
						Pos.line += 1; Pos.col = 1;
					}
					else {
						Pos.col += 1;
					}
					System.out.println(lineN + ":" + colN +
						"\t**ERROR: invalid comment");
					toBreak = true;
				}
			}
		}}
			


"+"	{Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.PLUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
"-" {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.MINUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
"*" {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.TIMES,
			new CSXToken(Pos.linenum,Pos.colnum));}	
"/" {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.SLASH,
			new CSXToken(Pos.linenum,Pos.colnum));}
			
"!="	{Pos.setpos(); Pos.col += 2;
		return new Symbol(sym.NOTEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
"==" {Pos.setpos(); Pos.col += 2;
		return new Symbol(sym.EQ,
			new CSXToken(Pos.linenum,Pos.colnum));}	
"&&" {Pos.setpos(); Pos.col += 2;
		return new Symbol(sym.CAND,
			new CSXToken(Pos.linenum,Pos.colnum));}
"||" {Pos.setpos(); Pos.col += 2;
		return new Symbol(sym.COR,
			new CSXToken(Pos.linenum,Pos.colnum));}
			
"<" {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.LT,
			new CSXToken(Pos.linenum,Pos.colnum));}
">" {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.GT,
			new CSXToken(Pos.linenum,Pos.colnum));}
"<=" {Pos.setpos(); Pos.col += 2;
		return new Symbol(sym.LEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
">=" {Pos.setpos(); Pos.col += 2;
		return new Symbol(sym.GEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
			
"," {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.COMMA,
			new CSXToken(Pos.linenum,Pos.colnum));}
"!" {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.NOT,
			new CSXToken(Pos.linenum,Pos.colnum));}
":" {Pos.setpos(); Pos.col += 1;
		return new Symbol(sym.COLON,
			new CSXToken(Pos.linenum,Pos.colnum));}	
";"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SEMI,
			new CSXToken(Pos.linenum,Pos.colnum));}
"="	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.ASG,
			new CSXToken(Pos.linenum,Pos.colnum));}
			
"("	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
")"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
"{"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
"}"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
"["	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
"]"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
			

{Digit}+	{//collects integer literal, checks for overflow
		  Pos.setpos(); Pos.col += yytext().length();
		  Double dblVal = Double.valueOf(yytext());
		  Integer val;
		  if (dblVal > Integer.MAX_VALUE) {
		  	System.out.println(Pos.linenum + ":" + Pos.colnum + 
		  		"\t**ERROR: value > int MAX_VALUE");
		  	val = Integer.MAX_VALUE;
		  }
		  else if (dblVal < Integer.MIN_VALUE) {
		  			  	System.out.println(Pos.linenum + ":" + Pos.colnum + 
		  		"\t**ERROR: value > int MIN_VALUE");
		  	val = Integer.MIN_VALUE;
		  }
		  else {
		  	val = Integer.parseInt(yytext());
		  }
		  return new Symbol(sym.INTLIT,
				new CSXIntLitToken(val,Pos.linenum,Pos.colnum));}
		                    	
[~]{Digit}+	{//collects negative integer literal, accounts of overflow
		  Pos.setpos(); Pos.col += yytext().length();
		  String tmp = yytext().substring(1);
		  Double dblVal = Double.valueOf(tmp);
		  dblVal = -dblVal;
		  Integer val;
		  if (dblVal > Integer.MAX_VALUE) {
		  	System.out.println(Pos.linenum + ":" + Pos.colnum + 
		  		"\t**ERROR: value > int MAX_VALUE");
		  	val = Integer.MAX_VALUE;
		  }
		  else if (dblVal < Integer.MIN_VALUE) {
		  			  	System.out.println(Pos.linenum + ":" + Pos.colnum + 
		  		"\t**ERROR: value > int MIN_VALUE");
		  	val = Integer.MIN_VALUE;
		  }
		  else {
		  	val = Integer.parseInt(tmp);
		  }
		  return new Symbol(sym.INTLIT,
				new CSXIntLitToken(val,Pos.linenum,Pos.colnum));}	                    	
		                    	
                   	
			

			

\n	{Pos.line +=1; Pos.col = 1;}
{Whitespace}+ {Pos.col += yytext().length();}
[$] {Pos.line +=1; Pos.col = 1;}

[^eof] {//if invalid token detected
		Pos.col += yytext().length();
		System.out.println(Pos.line + ":" + Pos.colnum + 
			"\t**ERROR: Invalid token (" + yytext() + ")");}


